_______________________________________________________________________________________________________________
// comando para git bash
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
pwd -> ver en donde me encuentro
cd (change directory) -> cambiar de directorio
cd .. -> regresar al directorio anterior
ls -> listar archivos contenidos en el directorio actual
ls -a -> listar todos los archivos (incluyendo ocultos) del directorio actual
ls -l ->  listar todos los archivos en una lista
mkdir (make directory) -> crear carpeta
touch -> crear archivo vacio
rm (remove) -> elimina archivos, directorios o todo el disco duro si se hace mal. 
Lo que se elimina con este comando no se va a la papelera*

* lo que esta despues del guion son argumentos. Un solo guion significa que solo usaremos una letra, 
dos guiones es para una palabra

_______________________________________________________________________________________________________________
// para configurar git por primera vez
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
git config -> para ver informacion de comandos de la configuracion
git config --list -> para ver como esta configurado nuestro git y si falta informacion
git config --global user.name "nombre apellido" -> para indicar nombre de quien usara git 
git config --global user.email "example@example.com" -> para indicar email de quien usara git 
_______________________________________________________________________________________________________________
// para usar git en un proyecto
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
git init -> inicializa git en una carpeta base
git status -> indica si hay archivos por añadir (en rojo) o sin commitear (en verde)
git add example.txt -> añadir archivos
git rm --cached: Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro. Básicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git commit -m "text exmaple" -> envia los archivos al repositorio local

** si hago commit sin escribir un mensaje, se abrira otra ventana (vim). 
Para escribir el mensaje, presionar cualquier tecla. Para salir, presionar las teclas esc, luego shift + zz

git cat -> ver contenido del archivo
git log -> historial de commits de un archivo.
git log --stat -> muestra cambios especificos en el historial de commits de un archivo.
git log --oneline -> Te muestra el id commit y el título del commit

** en git log aparece un numero muy largo que es el identificador de cada commit. Si quiero comparar dos commit y ver que diferencias hay, debo usar el comando git diff numeroprimeraversion numerosegundaversion.
** Si quiero ver las diferencias entre mi directorio y el staging, solo poner git diff y saldran los archivos que estan añadidos, sin añadir y modificados.

git show example.txt -> muestra los cambios a detalle que se han realizado en el archivo. Para salir del END presionar shift + q
git reset idcommitanterior --hard/soft -> retrocede a una version anterior del archivo. EL modo hard borra todo hasta la version escogida, el modo soft borra todo, pero deja lo que este en el staging en ese momento.
git reset HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
git branch -> para saber que ramas existen y en donde estoy
git branch nombre_nueva_rama -> crea una rama nueva
git branch -d -> borra una rama
git checkout nombrerama -> moverse a otra rama
git checkout idcommit example.txt -> el archivo vuelve a la version seleccionada. Para guardarlo se debe hacer add y commit. Esto no borra versiones anterirores. Si se desea volver a la version mas reciente, poner git checkout master example.txt 
git merge nombre_rama/master -> fusion de los archivos de master con otra rama. Dependiendo de lo que se quiera, se debe escoger donde hacer el merge. Si existe conflicto, se debe solucionar y luego hacer commit normal.
gitk -> para ver todos los commit graficamente
git commit -am "example text" -> add y commit fusionados
git push origin master -> enviar cambios al repositorio remoto
git pull origin master -> traer cambios desde mi repositorio remoto
alias nombre_alias="comando de git" -> asigna un alias a un comando para ejecutarlo de forma mas rápida. (historial)
git tag -a nombre_tag -m "mensaje descriptivo" id_commit -> crear tag
git push origin --tags -> enviar tags a mi repositorio remoto
git show-ref --tags -> ver id asociado a tags
git tag -> ver tags
git tag -d nombre_tag -> eliminar tag. Se debe hacer push de tags
git push origin :refs/tags/nombre_tag -> eliminar tag de github
git push origin nombre_rama -> subir rama a repositorio remoto (github)

// creación de una llave ssh
ssh-keygen -t rsa -b 4096 -C "example@example.com" -> crear llave ssh asociada a tu correo.
eval $(ssh-agent -s) -> verificar si el “servidor” de llaves SSH de mi computadora esta activo.
ssh-add ~/.ssh/id_rsa -> añadir llave (privada)

_______________________________________________________________________________________________________________
Cómo se realiza un pull request
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
* Se trabaja en una rama paralela los cambios que se desean: git checkout -b <rama>.
* Se hace un commit a la rama: git commit -am '<Comentario>'.
* Se suben los cambios al remoto: git push origin <rama>.
* En GitHub se hace el pull request comparando la rama master con la rama del fix.
* Uno, o varios colaboradores revisan que el código sea correcto y dan feedback (en el chat del pull request).
* El colaborador hace los cambios que desea en la rama y lo vuelve a subir al remoto (automáticamente jala la historia de los cambios que se hagan en la rama, en remoto).
* Se aceptan los cambios en GitHub.
* Se hace merge a master desde GitHub.
* Importante: Cuando se modifica una rama, también se modifica el pull request.

_______________________________________________________________________________________________________________
// procesos que hace git
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
Cuando se hace git init, se crea un espacio en memoria ram que se llama staging y se crea el repositorio local (.git). En este punto, cuando los archivos aun no se han añadido, estan es estado 'untracked' (sin rastrear). Cuando se hace git add, el estado del archivo cambia a 'tracked' (rastreado) y se añaden los archivos al staging, pero aun no se han subido al repositorio. Si hago modificaciones a un archivo sin añadirlo, entonces su estado sera 'modified'. Cuando se hace commit, los archivos son enviados al repositorio local y su estado es 'commited'. Este repositorio se llama master (ahora main).